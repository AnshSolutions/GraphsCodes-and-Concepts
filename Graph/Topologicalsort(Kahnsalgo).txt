#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<int> topologicalSort(int n, vector<vector<int>>& edges) {
    // Step 1: Build the graph and calculate indegrees
    vector<vector<int>> graph(n);
    vector<int> indegree(n, 0);

    for (auto& edge : edges) {
        int u = edge[0], v = edge[1];
        graph[u].push_back(v); // Add directed edge u -> v
        indegree[v]++; // Increment indegree of v
    }

    // Step 2: Initialize a queue with nodes having 0 indegree
    queue<int> q;
    for (int i = 0; i < n; i++) {
        if (indegree[i] == 0) {
            q.push(i);
        }
    }

    // Step 3: Perform BFS
    vector<int> result;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        result.push_back(u); // Add to topological order

        // Reduce indegree of neighbors
        for (int v : graph[u]) {
            indegree[v]--;
            if (indegree[v] == 0) {
                q.push(v);
            }
        }
    }

    // Step 4: Check if topological sort is possible (no cycles)
    if (result.size() != n) {
        return {}; // Graph has a cycle
    }

    return result;
}

int main() {
    int n = 6; // Number of nodes
    vector<vector<int>> edges = {{5, 2}, {5, 0}, {4, 0}, {4, 1}, {2, 3}, {3, 1}}; // Directed edges

    vector<int> sortedOrder = topologicalSort(n, edges);

    if (sortedOrder.empty()) {
        cout << "Graph has a cycle, no valid topological order exists." << endl;
    } else {
        cout << "Topological Order: ";
        for (int node : sortedOrder) {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}